---
- hosts: all
  become: yes
  become_user: root
  become_method: sudo
  tasks:
    - name: Replace LABEL=cloudimg-rootfs with (hd0) to fix apt
      replace:
        path: /boot/grub/menu.lst
        regexp: groot=LABEL=cloudimg-rootfs
        replace: groot=(hd0)
        backup: yes
      register: menu_lst
    - name: regenerate menu.lst to reflect changes
      command: update-grub-legacy-ec2
      when: menu_lst.changed
    - name: Install Java state=present update_cache=yes
      apt:
        name: "{{ packages }}"
      vars:
        packages:
          - openjdk-8-jdk
          - ntp

- hosts: bastion
  become: yes
  become_user: root
  become_method: sudo
  tasks:
    - name: Install tinyproxy
      apt:
        name: tinyproxy
        update_cache: yes
    - name: Create tinyproxy config from template
      template:
        src: templates/tinyproxy.conf.j2
        dest: /etc/tinyproxy/tinyproxy.conf
        owner: root
        group: root
        mode: 0644
      register: tinyproxy_template
    - name: Copy filter file for tinyproxy
      copy:
        src: files/filter
        dest: /etc/tinyproxy/
        backup: yes
        owner: root
        group: root
        mode: 0644
      register: filter_file
    - name: Enable tinyproxy
      systemd:
        enabled: yes
        name: tinyproxy
        state: started
    - name: Restart tinyproxy
      systemd:
        name: tinyproxy
        state: restarted
      when: filter_file.changed or tinyproxy_template.changed
    - name: Allow ssh through firewall
      ufw:
        rule: allow
        name: OpenSSH
    - name: Allow tinyproxy through firewall
      ufw:
        rule: allow
        src: "{{ private_subnet }}"
        port: 8888
        direction: in
        proto: any
        state: enabled

- hosts: jg-cass
  become: yes
  become_user: root
  become_method: sudo
  tasks:
    - name: Create apt proxy config from template
      template:
        src: templates/proxy.conf.j2
        dest: /etc/apt/apt.conf.d/proxy.conf
        owner: root
        group: root
        mode: 0644
    - name : Add the key for the cassandra debian repo
      apt_key:
        data: "{{ lookup('file', 'cassandra.asc') }}"
    - name: add cassandra debian repository
      apt_repository:
        repo: 'deb http://www.apache.org/dist/cassandra/debian 311x main'
        state: present
    - name: install cassandra
      apt:
        name: cassandra
        state: present
        update_cache: yes
    - name: Create Cassandra config from template
      template:
        src: templates/cassandra.yaml.j2
        dest: /etc/cassandra/cassandra.yaml
        owner: root
        group: root
        mode: 0644
        backup: yes
    - name: check if Cassandra is clustered
      shell: "nodetool status | grep [U,D][N,L,J,M] | wc -l"
      ignore_errors: True
      register: cassandra_cluster_node_count
    - name: Stop Cassandra because cluster is not initialized
      systemd:
        name: cassandra
        state: stopped
      when: cassandra_cluster_node_count.stdout|int < 2
    - name: Clear out Cassandra data/system folder to enable cluster bootstrap
      command: rm -rf /var/lib/cassandra/data/system/*
      when: cassandra_cluster_node_count.stdout|int < 2
    - name: Clean out unused file
      file:
        state: absent
        path: /etc/cassandra/cassandra-topology.properties
      when: cassandra_cluster_node_count.stdout|int < 2
    - name: Enable Cassandra
      systemd:
        enabled: yes
        name: cassandra
        state: started
    - name: Allow ssh through firewall
      ufw:
        rule: allow
        name: OpenSSH
    - name: Allow Cassandra through firewall
      ufw: direction=in proto=tcp rule=allow port={{ item.port }}
      with_items:
        - { port: 7000}
        - { port: 7001}
        - { port: 7199}
        - { port: 9042}
        - { port: 9160}
        - { port: 9142}
    - name: Enable ufw
      ufw:
        state: enabled

- hosts: jg-es
  become: yes
  become_user: root
  become_method: sudo
  environment:
    https_proxy: "http://{{ bastion_ip }}:8888"
    http_proxy: "http://{{ bastion_ip }}:8888"
  tasks:
    - name: Create apt proxy config from template
      template:
        src: templates/proxy.conf.j2
        dest: /etc/apt/apt.conf.d/proxy.conf
        owner: root
        group: root
        mode: 0644
  roles:
    - role: elastic.elasticsearch
  vars:
    es_instance_name: "node1"
    es_data_dirs:
      - "/opt/elasticsearch/data"
    es_log_dir: "/opt/elasticsearch/logs"
    es_config:
      network.host: "0.0.0.0"
      node.name: "node1"
      cluster.name: "janusgraph"
      discovery.zen.ping.unicast.hosts: "{{ es_master_ip }}:9301"
      http.port: 9200
      transport.tcp.port: 9300
      node.data: true
      node.master: true
      bootstrap.memory_lock: false
    es_scripts: false
    es_templates: false
    es_version_lock: false
    es_api_port: 9200

- hosts: jg-gremlin
  become: yes
  become_user: root
  become_method: sudo
  environment:
    https_proxy: "http://{{ bastion_ip }}:8888"
  tasks:
    - name: Install unzip
      apt:
        name: unzip
        update_cache: yes
    - name: Copy JanusGraph zip
      get_url:
        url: "http://github.com/JanusGraph/janusgraph/releases/download/v0.3.1/janusgraph-0.3.1-hadoop2.zip"
        dest: "/tmp/janusgraph-0.3.1-hadoop2.zip"
        mode: 0644
        use_proxy: yes
    - name: check if /opt/janusgraph already exists
      command: "ls /opt/janusgraph"
      ignore_errors: True
      register: find_janusgraph_folder
    - name: Unzip JanusGraph
      unarchive:
        src: "/tmp/janusgraph-0.3.1-hadoop2.zip"
        dest: /opt/
        remote_src: yes
      when: find_janusgraph_folder is failed
    - name: rename janusgraph folder
      command: mv /opt/janusgraph-0.3.1-hadoop2 /opt/janusgraph
      when: find_janusgraph_folder is failed
    - name: Create Janusgrpah log directory
      file:
        path: /var/log/janusgraph
        state: directory
    - name: Create janusgraph properties file from template
      template:
        src: templates/janusgraph.properties.j2
        dest: /opt/janusgraph/conf/gremlin-server/janusgraph.properties
        owner: ubuntu
        group: ubuntu
        mode: 0644
        force: yes
    - name: Create janusgraph server file from template
      template:
        src: templates/janusgraph-server.yaml.j2
        dest: /opt/janusgraph/conf/gremlin-server/janusgraph-server.yaml
        owner: ubuntu
        group: ubuntu
        mode: 0644
        force: yes
    - name: Create janusgraph server wrapper script from template
      template:
        src: templates/janusgraph-service-wrapper.sh.j2
        dest: /opt/janusgraph/bin/janusgraph-service-wrapper.sh
        owner: ubuntu
        group: ubuntu
        mode: 0755
        force: yes
    - name: Copy over JanusGraph unit file
      copy:
        src: files/janusgraph.service
        dest: /lib/systemd/system/janusgraph.service
        force: yes
        owner: root
        group: root
        mode: 0644
    - name: Enable janusgraph
      systemd:
        daemon_reload: yes
        enabled: yes
        name: janusgraph
        state: started
    - name: Allow ssh through firewall
      ufw:
        rule: allow
        name: OpenSSH
    - name: Allow gremlin server through firewall
      ufw:
        rule: allow
        port: 8182
        direction: in
        proto: any
        state: enabled